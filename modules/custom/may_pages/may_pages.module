<?php

/**
 * @file 2
 * Module for building and managing site's pages.
 */

/**
 * Implements hook_menu().
 */
function may_pages_menu() {
  $items = array();
  /*
    $items['sh-get'] = array(
    'title' => 'Sh Get',
    'page callback' => 'may_pages_sh_get',
    //'access callback' => 'may_misc_userIsAdmin',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );
   */
  
  $items['projects/pictures-by-type'] = array(
    'title' => t('Изображения по типам помещений'),
    'page callback' => 'may_pages_get_pictures_by_type',
    //'page arguments' => array(2,3),
    //'access callback' => 'may_misc_userIsAdmin',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_access().
 */
function may_pages_access($type = null) {
  switch ($type) {
    default:
      if (arg(1) == 'edit') {
        if (!user_access('administer site configuration')) {
          return false;
        }
      }
      break;
  }
  return true;
}

/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function may_pages_form_alter(&$form, &$form_state, $form_id) {

  dpm($form_id);  dpm($form);

  switch ($form_id) {

    case 'views_exposed_form':
      if (!empty($form['project_type']['#options'])) {
        $map = array('- Any -' => 'Любой',
          'Interiors' => 'Интерьеры',
          'Offices' => 'Офисы',
          'Cottages' => 'Коттеджи',
          'Architecture' => 'Архитектура'
         );
        foreach ($form['project_type']['#options'] as &$project_type) {
          $project_type = $map[$project_type];
        }
      }
      
      break;
      
    case 'project_node_form':
      may_pages_passExtraParametersToCKEditor();
      break;
  } // End of switch ($form_id) {
}

/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function may_pages_node_view($node, $view_mode) {

  //dpm($node, '$node in node_view');

  switch ($node->type) {
    case 'project':
      break;
  } // End of switch ($node->type) {
}

/**
 *
 * @param type $variables
 * Works with page view only, not on edit form
 */
function may_pages_preprocess_node(&$variables) {

  /*
    static $custom_pages_css_added;
    if ($variables['type'] == 'project' && !$custom_pages_css_added) {

    //dpm($variables, '$variables in bootstrap_may_preprocess_node');

    $custom_pages_css_added = TRUE;
    $project_custom_css = path_to_theme() . '/css/projects.css';
    if (file_exists($project_custom_css)) {
    drupal_add_css($project_custom_css, array('weight' => 99, 'group' => 200));
    }

    drupal_add_js('sites/all/libraries/jquery.plugins/_sliders/slick/slick.js');
    drupal_add_css('sites/all/libraries/jquery.plugins/_sliders/slick/slick.css', array('weight' => 99, 'group' => 200));
    drupal_add_css('sites/all/libraries/jquery.plugins/_sliders/slick/slick-theme.css', array('weight' => 99, 'group' => 200));

    drupal_add_js('sites/all/libraries/jquery.plugins/_sliders/slick-lightbox/dist/slick-lightbox.min.js');
    drupal_add_css('sites/all/libraries/jquery.plugins/_sliders/slick-lightbox/dist/slick-lightbox.css', array('weight' => 99, 'group' => 200));

    $path_to_custom_js = drupal_get_path('module', 'may_pages') . '/js/';
    drupal_add_js($path_to_custom_js . 'may_slick.js');
    }
   */
}

/**
 *
 * @param type $variables
 * Works with page view and edit form
 */
function may_pages_preprocess_page($variables) {
  //dpm($variables, '$variables in may_pages_preprocess_page');
}

/**
 *
 * @param type $variables
 * Works with page view and edit form
 */
function may_pages_preprocess_html(&$variables) {
  $variables['head_title_array']['slogan'] = variable_get('site_slogan');
  $variables['head_title'] = $variables['head_title_array']['title'] . ' | ' . $variables['head_title_array']['name'] . ' | ' . $variables['head_title_array']['slogan'];
}

/**
 * Pass extra parameters to cKeditor
 */
function may_pages_passExtraParametersToCKEditor() {
  $extra_imagefield_attributes = imagefield_attributes_get_all_attributes_names(FALSE, TRUE);
  $extraParametersToCKEditor = array(
    // Add New Allowed Content attributes to tags in CKEditor
    'custom_img_attr_fields' => array_merge(array('id', 'class', 'alt', 'title'), $extra_imagefield_attributes),
    'custom_div_attr_fields' => array_merge(array('id', 'class', 'alt', 'title', 'style', 'parallax', 'parallaxx'), $extra_imagefield_attributes),
    'custom_attr_fields_textarea_type' => array('data-type', 'data-order', 'style'),
    // Pass to CKEditor a css file for the Project page type
    'project_custom_css_file' => url(drupal_get_path('theme', variable_get('theme_default', NULL)) . '/css/projects.css', array('absolute' => TRUE)),
  );
  drupal_add_js($extraParametersToCKEditor, array('type' => 'setting'));
}

/**
 * Implements hook_block_info().
 */
function may_pages_block_info() {

  $blocks['sticky_header_big'] = array(
    'info' => 'Big sticky header with menu',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['sticky_header_small'] = array(
    'info' => 'Small sticky header with menu',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function may_pages_block_view($delta = '') {
  $block = array();
  switch ($delta) {

    case 'sticky_header_big':
      $block['subject'] = 'Big sticky header with menu';
      $block['content'] = may_pages_getStickyHeader('big');
      break;

    case 'sticky_header_small':
      $block['subject'] = 'Small sticky header with menu';
      $block['content'] = may_pages_getStickyHeader('small');
      break;
  }

  return $block;
}

/**
 *
 * @param type $target
 * @return type
 */
function may_pages_getStickyHeader($target = 'big') {

  $upper_menu = may_pages_getStickyHeader_upperMenu();
  $main_menu = may_pages_getStickyHeader_mainMenu();

  $output = <<<HTML
  <div class="sticky-header $target">
    <header class="cd-auto-hide-header">
      <div class="logo"><a href="/"><div style="width: 50px; height: 30px; background: violet;" alt="Logo">МАЙ</div></a></div>
      $upper_menu
    </header> <!-- .cd-auto-hide-header -->
    <section class="cd-hero">
      <div class="cd-hero-content">
        <!-- your content here -->
      </div>
    </section> <!-- .cd-hero -->
    $main_menu
   </div>
HTML;

  return $output;
}

/**
 *
 * @return type
 */
function may_pages_getStickyHeader_upperMenu() {

  $menu = menu_tree_all_data('menu-upper-menu');
  $themed_menu = may_pages_get_menu_children_themed($menu);
  $output = <<<HTML
    <nav class="cd-primary-nav">
      <div class="navbar navbar-default---2 yamm">
          <div class="navbar-header">
            <!-- <button type="button" data-toggle="collapse" data-target="#navbar-collapse-1" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button> -->
            <!-- <a href="#" class="navbar-brand">Upper slogan/title line</a> -->
            <div class="top-slogan-title navbar-brand">Мастерская Архитектурных Идей</div>
          </div>
      <!--
          <div id="navbar-collapse-1" class="navbar-collapse collapse">
            $themed_menu
          </div>
      -->
      </div>
    </nav> <!-- .cd-primary-nav -->
HTML;

  return $output;
}

/**
 *
 * @return type
 */
function may_pages_getStickyHeader_mainMenu() {

  $menu = menu_tree_all_data('main-menu');
  $themed_menu = may_pages_get_menu_children_themed($menu);
  $output = <<<HTML
      <nav class="cd-secondary-nav">
        <div class="navbar navbar-default yamm">
          <div class="navbar-header">
            <button type="button" data-toggle="collapse" data-target="#navbar-collapse-2" class="navbar-toggle"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button>
            <a href="#" class="navbar-brand">М.А.Й.RU</a>
          </div>
          <div id="navbar-collapse-2" class="navbar-collapse collapse">
            $themed_menu
          </div>
        </div>
      </nav> <!-- .cd-secondary-nav -->
HTML;

  return $output;
}

/**
 *
 * @param type $menu_parent
 * @param type $level
 * @return string
 */
function may_pages_get_menu_children_themed($menu_parent, $level = 0) {
  $ul_class = ' class="' . ($level == 0 ? 'nav navbar-nav' : 'dropdown-menu') . '"';
  $layout = '<ul' . $ul_class . '>';
  foreach ($menu_parent as $key => $item) {
    if (!empty($item['link']['hidden'])) {
      continue;
    }
    //dpm($item, '$item');
    $li_class = $a_class = $caret = null;
    if ($item['link']['link_path'] == '<separator>') {
      $layout .= '<li class="divider"></li>';
      continue;
    }
    if ($level == 0) {
      $li_class = ' class="dropdown"';
    }
    elseif (!empty($item['below'])) {
      $li_class = ' class="dropdown dropdown-submenu"';
    }
    if (!empty($item['below'])) {
      $a_class = ' class="dropdown-toggle" data-toggle="dropdown"';
      if ($level == 0) {
        $caret = ' <b class="caret"></b>';
      }
    } 
    $layout .= '<li' . $li_class . '><a' . $a_class . ' href="' . ($item['link']['link_path'] == '<nolink>' ? '#' : ($item['link']['link_path'] == '<front>' ? '/' : '/'. $item['link']['link_path'])    ) . '">' . $item['link']['link_title'] . $caret . '</a>';
    if (!empty($item['below'])) {
      $layout .= may_pages_get_menu_children_themed($item['below'], $level + 1);
    }
    $layout .= '</li>';
  }
  $layout .= '</ul>';
  return $layout;
}

/**
 *
 * @param type $theme_registry
 */
function may_pages_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['image_resize_filter_image'])) {
    $theme_registry['image_resize_filter_image']['function'] = 'may_pages_resize_filter_image';
    $theme_registry['image_resize_filter_image']['theme path'] = drupal_get_path('module', 'may_pages');
  }
}

/**
 * Generate a themed image tag based on an image array.
 *
 * @param $image
 *   An array containing image information and properties.
 * @param $settings
 *   Settings for the input filter.
 */
function may_pages_resize_filter_image($variables) {
  $image = $variables['image'];

  // a4s patch
  if ($image['original'] != $image['attributes']['src']) {
    $image['attributes']['data-original'] = $image['original'];
  }
  else {
    unset($image['attributes']['data-original']);
  }
  
  
  
  
  // Reset the size to the original TEMPORARILY
  $image['attributes']['src'] = $image['original'];
  
  //dpm($image, '$image');
  
  //$styles = array('large' => '480w', 'medium' => '220w', 'thumbnail' => '100w');
  $styles = array('350' => '350w', '500' => '500w', '800' => '800w', '1000' => '1000w', '1200' => '1200w');
  
  static $slick_lightbox_source_data;
  if (!isset($slick_lightbox_source_data)) {
    $slick_lightbox_source_data = array(
      // Add New Allowed Content attributes to tags in CKEditor
      'slick_lightbox_source_data' => array('sizes' => array_keys($styles)),
    );
    drupal_add_js($slick_lightbox_source_data, array('type' => 'setting'));
  }
  
  
  
  list(,$original_path) = explode('/f/', $image['attributes']['src']);
  $image['attributes']['data-originalpath'] = '/' . $original_path;
  $image['attributes']['srcset'] = '';
  foreach ($styles as $style_name => $style_size) {
    $image['attributes']['srcset'] .= ($image['attributes']['srcset'] ? ', ' : '') . '/f/styles/' . $style_name . '/public/' . $original_path . ' ' . $style_size;
  }
  
  if (!empty($image['attributes']['width']) && !empty($image['attributes']['height'])) {
    $image['attributes']['data-iaspect'] = $image['attributes']['height']/$image['attributes']['width'];
  }
      
  //$sizes = array('(min-width:768px)' => '768px', '(min-width:460px)' => '220px', '(min-width:0px)' => '100vw');
  $sizes = array('(min-width:768px)' => '768px', '(min-width:0px)' => '100vw');
  foreach ($sizes as $size_name => $size_size) {
   if ($size_name == '(min-width:768px)') {
    if (!empty($image['attributes']['width']) && $image['attributes']['width'] != '123') {
      $image['attributes']['sizes'] = $size_name . ' ' . $image['attributes']['width'] . 'px';
    }
    else {
     $image['attributes']['sizes'] = $size_name . ' ' . $size_size;
    }
   }
   else {
     $image['attributes']['sizes'] .= ', ' . $size_name . ' ' . $size_size;
   }
  }
  
  //$image['attributes']['srcset'] = 'http://a4s-local.m-a-y-7.ru/f/styles/large/public/img/olga_yuskasova/interiors/1-9/777777.jpg?itok=26nV71hC 480w, http://a4s-local.m-a-y-7.ru/f/styles/medium/public/img/olga_yuskasova/interiors/1-9/777777.jpg?itok=co1erRKH 220w, http://a4s-local.m-a-y-7.ru/f/styles/thumbnail/public/img/olga_yuskasova/interiors/1-9/777777.jpg?itok=IxNKc6hT 100w';
  //$image['attributes']['sizes'] = '(min-width:768px) 768px, (min-width:460px) 220px, (min-width:0px) 100vw';
      
  //dpm($image['attributes'], '$image[attributes]');
  
  $output = '<img' . drupal_attributes($image['attributes']) . ' />';
  if ($image['link']) {
    $output = '<a' . drupal_attributes($image['link']['attributes']) . '>' . $output . '</a>';
  }
  return $output;
}

/**
 * 
 * @return type
 */
function may_pages_get_image_types() {
  return array(
    'gostinye' => 'Гостиные',
    'gostevye' => 'Гостевые',
    'studii' => 'Студии', 
    'spalni' => 'Спальни',
    'detskie' => 'Детские',
    'kabinety' => 'Кабинеты',
    'holly' => 'Холлы',
    'stolovye' => 'Столовые', 
    'kuhni' => 'Кухни', 
    'sanuzly' => 'Санузлы', 
    'prihozhie' => 'Прихожие',
    'bassejny' => 'Бассейны',
    'sauny' => 'Сауны',
    'bani' => 'Бани',
    'dushi' => 'Души',
    'balkony' => 'Балконы', 
    'lodzhii' => 'Лоджии', 
    'lestnitsy' => 'Лестничные пролёты', 
  );
}

function may_pages_get_project_types() {
  return array(
    'interiors' => 'Интерьеры',
    'cottages' => 'Коттеджи',
    'offices' => 'Офисы', 
    'architecture' => 'Архитектура',
  );
}


require_once 'sites/all/vendor/autoload.php';
use ColorThief\ColorThief;
/**
 * 
 * @param type $project_type
 * @param type $image_type
 * @return type
 */
function may_pages_get_pictures_by_type() {
  

  //dpm(arg(),'arg()');
  //dpm($project_type, '$project_type');
  //dpm($image_type, '$image_type');
  
  $args = arg();
  $project_type = !empty($args[2]) ? $args[2] : NULL;
  $image_type = !empty($args[3]) ? $args[3] : NULL;
      
  $image_type_map = array_merge(array('all' => 'Любой'), may_pages_get_image_types());
  $project_type_map = array_merge(array('all' => 'Любой'), may_pages_get_project_types());
  $project_title = !empty($_GET['project_title']) ? check_plain($_GET['project_title']) : NULL;
  $project_address = !empty($_GET['project_address']) ? check_plain($_GET['project_address']) : NULL;
  
  $results = NULL;
  $out = t('Ничего не найдено...');
      
  if ( !$project_type || !$image_type || ($image_type != 'all' && empty($image_type_map[$image_type])) || ($project_type != 'all' && empty($project_type_map[$project_type])) ) {
    return theme('images_by_type', array('images' => NULL));
  }

  $query = db_select('imagefield_attributes_values', 'a');

  $query->condition('a.type', 'data-roomtype');

  if ($image_type != 'all') {
    $query->condition('a.value', '%%' . $image_type_map[$image_type] . '%%', 'LIKE');
  }

  $query->fields('a', array('fid', 'type'));
  $query->addField('a', 'value', 'data-roomtype');

  $query->leftJoin('file_usage', 'u', 'u.fid = a.fid');
  $query->addField('u', 'id', 'nid');

  $query->leftJoin('node', 'n', 'n.nid = u.id');
  if ($project_title) {
    $query->condition('n.title', '%%' . $project_title . '%%', 'LIKE');
  }
  $query->fields('n', array('title'));

  if ($project_type && $project_type != 'all' && !empty($project_type_map[$project_type])) {
    $query->leftJoin('field_data_field_main_project_type', 'pt', 'pt.entity_id = n.nid');
    $query->condition('pt.field_main_project_type_value', $project_type_map[$project_type]);
  }

  if ($project_address) {
    $query->leftJoin('field_data_field_type_and_address', 'pa', 'pa.entity_id = n.nid');
    $query->condition('pa.field_type_and_address_value', '%%' . $project_address . '%%', 'LIKE');
  }

  $query->leftJoin('imagefield_attributes_values', 'a2', "a2.fid = a.fid AND a2.type = 'data-roomweight'");
  //$query->condition('a2.type', 'data-roomweight');
  $query->addField('a2', 'value', 'i_weight');
  
  $query->leftJoin('imagefield_attributes_values', 'a3', "a3.fid = a.fid AND a3.type = 'data-maincolor'");
  $query->addField('a3', 'value', 'i_maincolor');

  $query->join('file_managed', 'm', 'm.fid = a.fid');
  $query->fields('m', array('uri'));
  $results = $query->execute()->fetchAllAssoc('fid');

  /*
  $query->distinct();
  $query->addExpression('COUNT(a.fid)', 'count');
  $query = db_select('taxonomy_term_data', 'td')->extend('pagerDefault')->limit(80);
  $query->fields('td', array('name', 'tid', 'vid', 'description'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  //$query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
  $query->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  $query->condition('td.vid', $voc->vid);
  $query->orderBy('count', 'ASC');
  $results = $query->execute();
  $results->fetchAllAssoc('fid');
  */

  
  if (!empty($results)) {
    
    //Prepare some additional data
    foreach ($results as $key => $image) {
      
      $imageinfo = getimagesize($image->uri);
      $results[$key]->i_aspect = $imageinfo[1]/$imageinfo[0]; // h/w
      $results[$key]->i_dimensions_str = $imageinfo[3];
          
      $results[$key]->image_path_original = str_replace('public://', '/f/', $image->uri);
      list(, $results[$key]->image_path_public) = explode('/f/', $results[$key]->image_path_original);

      
      
      if (empty($image->i_maincolor)) {
        
        $closest_style_width = '350';
        $sourceImage = 'f/styles/' . $closest_style_width . '/public/' . $results[$key]->image_path_public;
        if (!file_exists($sourceImage)) {
          // If styled file does not yet exist, use the original file.
          $sourceImage = 'f/' . $results[$key]->image_path_public;
          //dpm('Not existed styled image, used original one for fid: ' . $image->fid);
        }
        else {
          //dpm('Used styled (small) image one for fid: ' . $image->fid);
        }
        $dominantColor = ColorThief::getColor($sourceImage);
        if(!empty($dominantColor)) {
          $hex = '#' . sprintf('%02x', $dominantColor[0]) . sprintf('%02x', $dominantColor[1]) . sprintf('%02x', $dominantColor[2]);
          $results[$key]->i_maincolor = $hex;
          
          // Save just found color to DB.
          $query = db_select('imagefield_attributes_values', 'a');
          $query->condition('a.fid', $image->fid);
          $query->condition('a.type', 'data-maincolor');
          $query->addField('a', 'value', 'i_maincolor');
          if($result = $query->execute()->fetchObject()) {
            //dpm($result, '$results');
            db_update('imagefield_attributes_values')
            ->fields(array(
                'value' => $results[$key]->i_maincolor,
                ))
            ->condition('fid', $image->fid)
            ->condition('type', 'data-maincolor')
            ->execute();
            //dpm('Updated color for fid: ' . $image->fid);
          }
          else {
            db_insert('imagefield_attributes_values') // Table name no longer needs {}
            ->fields(array(
              'fid' => $image->fid,
              'type' => 'data-maincolor',
              'value' => $results[$key]->i_maincolor,
            ))
            ->execute();
            //dpm('Inserted color for fid: ' . $image->fid);
          }
        } // End of if(!empty($dominantColor)) {
        else {
          //dpm('Error creating maincolor for fid: ' . $image->fid . '... using the default one');
          //Set a default color.
          $results[$key]->i_maincolor = 'rgb(219, 212, 209)';
        }
        
      } // End of if (empty($image->i_maincolor)) {
      else {
        //dpm('Main color is set for fid: ' . $image->fid);
      }
      
    } // End of foreach ($results as $key => $image) {
    
    drupal_add_js('sites/all/libraries/jquery.plugins/_sliders/slick/slick.js');
    drupal_add_css('sites/all/libraries/jquery.plugins/_sliders/slick/slick.css', array('weight' => 99, 'group' => 200));
    drupal_add_css('sites/all/libraries/jquery.plugins/_sliders/slick/slick-theme.css', array('weight' => 99, 'group' => 200));

    $styles = array('350' => '350w', '500' => '500w', '800' => '800w', '1000' => '1000w', '1200' => '1200w');
    //static $slick_lightbox_source_data;
    //if (!isset($slick_lightbox_source_data)) 
    {
      $slick_lightbox_source_data = array(
        // Add New Allowed Content attributes to tags in CKEditor
        'slick_lightbox_source_data' => array('sizes' => array_keys($styles)),
      );
      drupal_add_js($slick_lightbox_source_data, array('type' => 'setting'));
    }
    drupal_add_js('sites/all/libraries/jquery.plugins/_sliders/slick-lightbox/dist/slick-lightbox.min.js');
    drupal_add_css('sites/all/libraries/jquery.plugins/_sliders/slick-lightbox/dist/slick-lightbox.css', array('weight' => 99, 'group' => 200));

    
    
    drupal_add_js('sites/all/libraries/jquery.plugins/masonry/dist/masonry.pkgd.min.js');
    drupal_add_js('sites/all/libraries/jquery.plugins/masonry-extra/imagesloaded.pkgd.min.js');
    drupal_add_js('sites/all/libraries/jquery.plugins/jquery_lazyload/jquery.lazyload.min.js');

  //  drupal_add_js('sites/all/libraries/jquery.plugins/masonry-extra/grid_loading_effects/js/AnimOnScroll.js');
  //  drupal_add_css('sites/all/libraries/jquery.plugins/masonry-extra/grid_loading_effects/css/component.css', array('weight' => 99, 'group' => 200));
  //  drupal_add_css('sites/all/libraries/jquery.plugins/masonry-extra/grid_loading_effects/css/default.css', array('weight' => 99, 'group' => 200));

    drupal_add_js(drupal_get_path('module', 'may_pages') . '/js/may_masonry.js');
  }
  return theme('images_by_type', array('images' => $results, 'image_type' => $image_type_map[$image_type], 'project_type' => $project_type_map[$project_type]));
}


/**
 * 
 * @param type $existing
 * @param type $type
 * @param type $theme
 * @param type $path
 * @return type
 */
function may_pages_theme($existing, $type, $theme, $path) {
  
  if($type != 'module') {
    return array();
  }
  
  return array(
    'images_by_type' => array(
      'variables' => array('images' => array()),
      'template' => 'templates/images-by-type',
    ),
  );
  
  
}


/**
 * Form with a fieldset of Add content section for Admin Content GetVoIP page (by Views).
 */
/*
function gv_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  //dpm($types);
  // Hide some content tupes if not a root.
  //dpm($user);
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  //if (in_array('root', $user->roles)) {
  if (in_array('Writer', $user->roles) && !in_array('administrator', $user->roles)) {
    $types_to_show = array('blog_post', 'article', 'provider', 'phone');
    foreach ($types as $type => $value) {
      if (!in_array($type, $types_to_show)) {
        unset($types[$type]);
      }
    }
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='http://getvoip.com/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}
*/


/**
 * Implements hook_form().
 *
 * @return $form
 *   Return nothing.
 */
function may_pages_filterPictures_form($form, &$form_state) {
  
  //dpm(arg(), 'arg in form');
  //dpm($_POST, '$_POST in form');
  /*  
  $form['#prefix'] = '<div id="subscribe" class="subscribe">
                        <svg class="subscribe-svg" version="1.1"
                           xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
                           x="0px" y="0px" width="60px" height="60px" style="enable-background:new 0 0 60 60;" xml:space="preserve">
                        <defs>
                        </defs>
                        <path style="fill:#FFFFFF;stroke:#035DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" d="M40.7,10l-8.9-8.3
                          c-1-1-2.7-1-3.7,0L19.3,10H40.7z"/>
                        <g class="subscribe-svg-paper">
                          <polygon style="fill:#C6E2F7;stroke:#035DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" points="53,10 7,10 7,53 
                            22,53 38,53 53,53   "/>
                          <g>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="27" y1="18" x2="33" y2="18"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="36" y1="32" x2="42" y2="32"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="18" y1="25" x2="23" y2="25"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="31" y1="25" x2="38" y2="25"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="27" y1="25" x2="27" y2="25"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="22" y1="32" x2="32" y2="32"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="18" y1="32" x2="18" y2="32"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="42" y1="25" x2="42" y2="25"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="25.2" y1="37.8" x2="30.2" y2="37.8"/>
                            
                              <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="34.2" y1="37.8" x2="34.2" y2="37.8"/>
                          </g>
                        </g>
                        <polygon style="fill:#FFFFFF;stroke:#035DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" points="53,21.4 53,31.6 
                          38,43 22,43 7,31.6 7,21.4 1,27 1,27.1 1,58.9 1,59 1.1,59 58.5,59 58.9,59 59,59 59,58.9 59,27.1 59,27 "/>
                        <path style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" d="M1,57.7V28.3
                          c0-0.5,0.6-0.8,1-0.5L22,43L2,58.2C1.6,58.5,1,58.2,1,57.7z"/>
                        <path style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" d="M59,57.7V28.3
                          c0-0.5-0.6-0.8-1-0.5L38,43l20,15.2C58.4,58.5,59,58.2,59,57.7z"/>
                        <line style="fill:#FFFFFF;stroke:#045DA0;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;" x1="21" y1="43" x2="38" y2="43"/>
                        </svg>


  ';
  $form['#suffix'] = '</div>';
  */
  $form['title'] = array(
    //'#markup' => '<div class="title">Sign up to receive weekly updates</div>',
    '#markup' => t('Параметры поиска изображений:'),//'<div class="subscribe-text">Join 100k readers and get the latest VoIP & Cloud Tech headlines delivered to your inbox.</div>',
      
  );
  
  $args = arg();
  $project_type = !empty($args[2]) ? $args[2] : '';
  $project_types = array( '' => 'Любой', 'interiors' => 'Интерьеры', 'cottages' => 'Коттеджи', 'offices' => 'Офисы', 'architecture' => 'Архитектура');
  $form['project_type'] = array(
    '#title' => 'Тип проекта',
    '#type' => 'select',
    '#options' => $project_types,
    '#default_value' => $project_type
  );
  
  $image_type = !empty($args[3]) ? $args[3] : '';
  $image_types = array_merge(array('' => 'Любой'), may_pages_get_image_types());
  $form['image_type'] = array(
    '#title' => 'Тип помещения',
    '#type' => 'select',
    '#options' => $image_types,
    '#default_value' => $image_type,
  );
  
  $project_title = !empty($_GET['project_title']) ? $_GET['project_title'] : NULL;
  $form['project_title'] = array(
    '#title' => 'Название проекта содержит...',
    '#type' => 'textfield',
    '#default_value' => $project_title,
  );
  
  $project_address = !empty($_GET['project_address']) ? $_GET['project_address'] : NULL;
  $form['project_address'] = array(
    '#title' => 'Адрес проекта содержит...',
    '#type' => 'textfield',
    '#default_value' => $project_address,
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Выбрать'),
  ); 
    
  return $form;
}



/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
/*
function may_pages_filterPictures_form_validate(&$form, &$form_state) {

  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
  //dpm($_GET);  
  
    
  // Clear hints, if any.
  $fields_to_clear_hints = array('email' => array('hint' => @$form['email']['#attributes']['title']));
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == $fdata['hint']) {
      
      // This clear the field.
      $form[$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if (isset($form[$fname]['#required']) && $form[$fname]['#required']) {
        form_set_error($fname, t('Please fill the field "' . $fname . '"'));
        return;
      }
      
    }
    elseif ($fname == 'email' && !preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,7})$/', $form_state['values'][$fname])) {
      form_set_error($fname, 'Wrong email format!');
      return;
    }
    
  }
  
  // Check if submitted email was submitted previously.
  $query = db_select('gv_emails_subscribed', 'e')  
        ->fields('e', array('email'));
  $query->condition('e.email', $form_state['values']['email']);
  $email = $query->execute()->fetchField();
  if ($email) {
    form_set_error('email', 'Email ' . $form_state['values']['email'] . ' has been submitted already!');
    return;
  }
  
}
*/


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function may_pages_filterPictures_form_submit(&$form, &$form_state) {
//  echo 'sss';
//  exit();
  //dpm($form_state['values'], '$form_state values');
  //dpm($_SERVER, '$_SERVER');
  //dpm(arg(), 'arg()');
  //dpm($_POST, '$_POST in submit');
  /*
  // Get a blog category
  $blog_cat = NULL;
  $nid = str_replace('node/', '', $_GET['q']);
  if ($nid && is_numeric($nid)) {
    $query = db_select('field_revision_field_blog_category', 'b')
          ->fields('b', array('field_blog_category_value'));
    $query->condition('b.entity_id', $nid);
    $blog_cat = $query->execute()->fetchField();
  }  
 
  $verification_code = md5(time());
  db_insert('gv_emails_subscribed')
    ->fields(array(
      'email'=> $form_state['values']['email'],
      'timestamp'=> time(),
      'code' => $verification_code,
      'source' => $blog_cat,
    ))
    ->execute();
    
  //gv_misc_sendMessage('email_verification', array('verification_code' => $verification_code . '=' . urlencode($form_state['values']['email']), 'email' => $form_state['values']['email']));
  */
  //drupal_set_message('Thank you for subscribing to our newsletter.');
  //drupal_goto(ltrim(@$_SERVER['REDIRECT_URL'], '/'), array('query' => array('nocache' => 1)));
  
  $project_type = !empty($form_state['values']['project_type']) ? $form_state['values']['project_type'] : 'all';
  $image_type = !empty($form_state['values']['image_type']) ? $form_state['values']['image_type'] : 'all';
  
  
  $project_options = array('project_title', 'project_address');
  foreach ($project_options as $option) {
    if (!empty($form_state['values'][$option])) {
      $query_options[$option] = $form_state['values'][$option];
    }
  }
  $options = array();
  if (!empty($query_options)) {
    $options = array('query' => $query_options);
  }
  //$project_title = !empty($form_state['values']['project_title']) ? $form_state['values']['project_title'] : NULL;
  //$project_address = !empty($form_state['values']['project_address']) ? $form_state['values']['project_address'] : NULL;
  //$options = !empty($form_state['values']['project_title']) ? array('query' => array('project_title' => $form_state['values']['project_title'])) : array();
  
  drupal_goto('projects/pictures-by-type/' . $project_type . '/' . $image_type, $options);
}

