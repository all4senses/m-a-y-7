<?php

/**
 * @file 2
 * Module for Instagram API
 */

/**
 * Implements hook_menu().
 */
function a4s_instagram_menu() {
  $items = array();
  
  $items['insta'] = array(
    'title' => t('Instagram API'),
    'page callback' => 'a4s_instagram_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['insta_behat'] = array(
    'title' => t('Instagram Behat endpoint'),
    'page callback' => 'a4s_instagram_behat',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['insta-get-images'] = array(
    'page callback' => 'a4s_insta_get_images_to_click_byTags_allUsers_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['insta-update-followers'] = array(
    'page callback' => 'a4s_instagram_update_followers_all_users_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * 
 */
function a4s_instagram_behat() {
  
  /*
  $url = '';
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  //curl_setopt($ch, CURLOPT_USERPWD, $username . ":" . $password);
  $results = json_decode(curl_exec($ch), TRUE);
  curl_close($ch);
  */
  $status = TRUE;
  $errors = NULL;
  $cookies = NULL;
  $response_data = array();
  if (!empty($_REQUEST['op'])) {
    switch ($_REQUEST['op']) {
      case 'set_cookies':
        if (empty($_REQUEST['target_domain']) || empty($_REQUEST['cookies'])|| empty($_REQUEST['username'])) {
          $status = FALSE;
          $errors = 'Wrong source parameters';
          break;
        }
        else {
          $behat_insta_cookies = variable_get('a4s_behat_insta_cookies', array());
          $new_cookies = unserialize($_REQUEST['cookies']);
          $behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['cookies'] = $new_cookies;
          foreach ($new_cookies as $new_cookie) {
            switch ($new_cookie['name']) {
              case 'ds_user_id':
                //4016509096; // solo, 6218303298; // a4s
                $behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['ds_user_id'] = $new_cookie['value'];
                break;
              case 'csrftoken':
                $behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['csrftoken'] = $new_cookie['value'];
                break;
              case 'sessionid':
                $behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['sessionid'] = $new_cookie['value'];
                break;
            }
          }
          if (!empty($behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['sessionid'])) {
            variable_set('a4s_behat_insta_cookies', $behat_insta_cookies);
          }
          else {
            $status = FALSE;
            $errors = 'Something wrong with Instagram cookies: sessionid is empty.';
          }
        }
        break;
        
      case 'get_cookies':
        if (empty($_REQUEST['target_domain']) || empty($_REQUEST['username'])) {
          $status = FALSE;
          $errors = 'Wrong source parameters';
          break;
        }
        else {
          $behat_insta_cookies = variable_get('a4s_behat_insta_cookies', array());
          if (!empty($behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['cookies'])) {
            $cookies = $behat_insta_cookies[$_REQUEST['target_domain']][$_REQUEST['username']]['cookies'];
            $response_data['cookies'] = $cookies;
          }
        }
        break;
        
      case 'get_creds':
        if (empty($_REQUEST['target_domain'])/* || empty($_REQUEST['username'])*/) {
          $status = FALSE;
          $errors = 'Wrong source parameters';
          break;
        }

        // Send different user creds every time
        $users_to_process = array('olyayuskasova', 'all4senses');
        
        $insta_last_data_processed = variable_get('a4s_insta_last_data_sent', array());
        
        if (count($users_to_process) > 1) {
          if (empty($insta_last_data_processed['username'])) {
            $current_user = $users_to_process[0];
          }
          else {
            foreach ($users_to_process as $key => $user) {
              if ($user == $insta_last_data_processed['username']) {
                if ($key + 1 >= count($users_to_process)) {
                  $current_user = $users_to_process[0];
                }
                else {
                  $current_user = $users_to_process[$key + 1];
                }
              }
            }
          }
        }
        else {
          $current_user = $users_to_process[0];
        }
        
        $insta_last_data_processed['username'] = $current_user;
        variable_set('a4s_insta_last_data_sent', $insta_last_data_processed);
        
        $users_credentials = variable_get('a4s_users_credentials', array());
        if ( empty($users_credentials[$_REQUEST['target_domain']][$current_user]) ) {
          $status = FALSE;
          $errors = 'We donot have credentials for ' . $current_user;
          break;
        }
        
        $response_data['creds'] = a4s_insta_user_credentials_environment($_REQUEST['target_domain'], $current_user);
        $response_data['creds']['p'] = $users_credentials[$_REQUEST['target_domain']][$current_user];
        
        $behat_insta_cookies = variable_get('a4s_behat_insta_cookies', array());
        if (!empty($behat_insta_cookies[$_REQUEST['target_domain']][$current_user]['cookies'])) {
          $cookies = $behat_insta_cookies[$_REQUEST['target_domain']][$current_user]['cookies'];
          $response_data['cookies'] = $cookies;
        }
        break;
        
        
        
        
      case 'alert':
        $subject = 'Alert from Behat!';
        a4s_instagram_jenkins_insta_switch_status('disable');
        drupal_mail('a4s_instagram', 'behat_problems_alert', 'all4senses@gmail.com', LANGUAGE_NONE, array('subject' => $subject, 'message' => $_REQUEST['message'], 'data' => $_REQUEST['data']));
        watchdog('Probems with Behat', 'Behat is TURNED OFF, because of: ' . $subject . ' ' . $_REQUEST['message'] . ' ==> <pre>'. print_r($_REQUEST['data'], TRUE) . '</pre>');
        break;
      
      
      
      
      case 'get_medias_to_like':
        
        //watchdog('Request media from handler', '$_REQUEST ==> <pre>'. print_r($_REQUEST, TRUE) . '</pre>');
        
        if (empty($_REQUEST['username'])) {
          $status = FALSE;
          $errors = 'No username provided';
          break;
        }

        $current_user = $_REQUEST['username'];
        
        $insta_current_user_tags = a4s_insta_get_user_tags($current_user);
        $insta_last_data_processed = variable_get('a4s_insta_last_data_sent', array());
        //watchdog('Request media from handler', '$insta_last_data_processed ==> <pre>'. print_r($insta_last_data_processed, TRUE) . '</pre>');
        
        if (count($insta_current_user_tags) > 1) {
          if (empty($insta_last_data_processed['tag'][$current_user]) || !in_array($insta_last_data_processed['tag'][$current_user], $insta_current_user_tags)) {
            $current_tag = $insta_current_user_tags[0];
          }
          else {
            foreach ($insta_current_user_tags as $key => $tag) {
              if ($tag == $insta_last_data_processed['tag'][$current_user]) {
                if ($key + 1 >= count($insta_current_user_tags)) {
                  $current_tag = $insta_current_user_tags[0];
                }
                else {
                  $current_tag = $insta_current_user_tags[$key + 1];
                }
              }
            }
          }
        }
        else {
          $current_tag = $insta_current_user_tags[0];
        }
        $insta_last_data_processed['tag'][$current_user] = $current_tag;
        
        variable_set('a4s_insta_last_data_sent', $insta_last_data_processed);
        
        $amount = 5;
        $response_data['medias'] = a4s_insta_get_medias_to_like($current_user, $current_tag, $amount);
        $response_data['tag'] = $current_tag;
        break;
        
        
        
        
      case 'set_medias_like_results':
        $links = array();
        if (!empty($_REQUEST['medias'])) {
          foreach (json_decode($_REQUEST['medias'], TRUE) as $media => $status) {
            $links[] = l($media, 'https://instagram.com/p/' . $media, array('attributes' => array('absolute' => TRUE)));
          }
        }
        watchdog('Liked with Behat', 'Tag ' . @$_REQUEST['tag'] . ' for ' . $_REQUEST['username'] . ' ==> <pre>'. print_r(@$_REQUEST['medias'], TRUE) . '</pre>, links ===> <pre>' . print_r($links, TRUE) . '</pre>');
        if (empty($_REQUEST['medias']) || empty($_REQUEST['username'])) {
          $status = FALSE;
          $errors = 'No username provided OR Empty liked medias results from behat.';
          break;
        }
        foreach (json_decode($_REQUEST['medias'], TRUE) as $shortcode => $status) {
          a4s_insta_media_set_liked($_REQUEST['username'], $shortcode, $status);
        }
        break;
    }
  }
  if (!$status) {
    // Report only in case of problems.
    watchdog('Request from Behat', "Error: $errors, _REQUEST ==> <pre>" . print_r($_REQUEST, TRUE) . '</pre>, $_SERVER ==> <pre>' . print_r($_SERVER, TRUE) . '</pre>');
  }
  $response_data += array('status' => $status, 'errors' => $errors);
  echo json_encode($response_data);
}

/**
 * 
 * @param type $username
 */
function a4s_insta_get_user_tags($username = NULL) {
  $insta_users_tags_default = array(
    'all4senses' => array('design', 'art', 'graphicdesign', 'photography', 'advertising'),
    'olyayuskasova' => array(
      'nsk', 'novosibirsk', 'новосибирск', 'нск', 'нск54', 'вьетнам', 'бизнес', 'тайланд', 'тай', 'толмачево', 'дом', 'nsk54',
      'нижневартовск', 'норильск', 'якутск', 'магадан', 'сургут', 'мальдивы',
      ),
  );
  $insta_users_tags = variable_get('a4s_insta_users_tags', $insta_users_tags_default);
  if (!$username) {
    return $insta_users_tags;
  }
  return $insta_users_tags[$username];
}

/**
 * 
 * @param type $domain
 * @param type $username
 * @return type
 */
function a4s_insta_user_credentials_environment($domain = NULL, $username = NULL) {
  $users_credentials_environment_default = array(
    'https://instagram.com' => array(
      'all4senses' => array(
        'u' => 'all4senses', 'p' => NULL,
        'u_field' => 'Phone number, username, or email',
        'p_field' => 'Password',
        'login_button' => 'Log in',
        'login_confirm_text' => array('All4senses Creative Group', 'Turn On Notifications'),
        'turn_on_notifications_button' => 'Turn On',
       ),
      'olyayuskasova' => array(
        'u' => 'olyayuskasova', 'p' => NULL,
        'u_field' => 'Phone number, username, or email',
        'p_field' => 'Password',
        'login_button' => 'Log in',
        'login_confirm_text' => array('Olga Yuskasova', 'Turn On Notifications'),
        'turn_on_notifications_button' => 'Turn On',
       ),
    ),
  );
  $users_credentials_environment = variable_get('a4s_users_credentials_environment', $users_credentials_environment_default);

  if ($domain && $username) {
    return $users_credentials_environment[$domain][$username];
  }
  elseif ($domain) {
    return $users_credentials_environment[$domain];
  }
  return $users_credentials_environment[$domain];
}

/**
 * 
 * @param type $tag
 * @param type $amount
 * @return type
 */
function a4s_insta_get_medias_to_like($username, $tag, $amount){
  
  $map_username_to_account_id_default = array('all4senses' => 1, 'olyayuskasova' => 2);
  $map_username_to_account_id = variable_get('a4s_map_username_to_account_id', $map_username_to_account_id_default);
  $account_id = $map_username_to_account_id[$username];

  //watchdog('Request media from handler', '$account_id = '. $account_id);
  
  $not_liked_by_tag = db_select('a4s_insta_clicks_by_tag', 'l')
      ->fields('l', array('shortcode', 'caption'))
      ->condition('l.tag', $tag)
      ->condition('l.account_id', $account_id)
      ->isNull('l.liked')
      ->orderBy('l.timestamp_added')
      ->range(0, $amount)
      ->execute()
      ->fetchAllKeyed(0,1);
  
  return $not_liked_by_tag;
}

/**
 * 
 * @param type $shortcode
 */
function a4s_insta_media_set_liked($username, $shortcode, $status) {
  
  $map_username_to_account_id_default = array('all4senses' => 1, 'olyayuskasova' => 2);
  $map_username_to_account_id = variable_get('a4s_map_username_to_account_id', $map_username_to_account_id_default);
  $account_id = $map_username_to_account_id[$username];
  
  if ($status) {
    db_update('a4s_insta_clicks_by_tag')
      ->fields(array('liked' => 1, 'timestamp_liked' => time()))
      ->condition('shortcode', $shortcode)
      ->condition('account_id', $account_id)
      ->execute();
  }
  else {
    db_delete('a4s_insta_clicks_by_tag')
      ->condition('shortcode', $shortcode)
      ->condition('account_id', $account_id)
      ->execute();
    watchdog('Request from Behat Error', "Error: media $shortcode for $username  was not found and have been removed from likes DB table! _REQUEST ==> <pre>" . print_r($_REQUEST, TRUE) . '</pre>');
  }
}

/**
 * @Then I get next medias and like them
 */
/*
public function iGetNextMediasAndLikeThem() {
  // Request cookies and creds from a handler server
  $data = array('op' => 'get_medias_to_like');
  $results = $this->a4s_curl($data);

  echo print_r($results, true);

  if (empty($results['medias'])) {
    echo 'Empty dedias recieved. Cancelled.';
    return;
  }
  
  $processed_medias = array();
  foreach ($results['medias'] as $media) {
    echo "\n\n\nProcess Media $media... \n";
    $this->getSession()->visit($this->locatePath('/p/' . $media));
    sleep(3);
    if ($this->a4s_currentPageMedia_isLiked()) {
      echo "....it has been already liked before. Skipped";
      $processed_medias[$media] = TRUE;
      continue;
    }
    echo "....Try to click...\n";
    $this->a4s_iClick('css', ".coreSpriteHeartOpen");
    sleep(3);
    $processed_medias[$media] = $this->a4s_currentPageMedia_isLiked() ? TRUE : FALSE;
    if ($processed_medias[$media]) {
      echo $processed_medias[$media] ? "....Liked successfully\n" : "....NOT Liked...Problem! \n";
    }
  }
  
  $data = array('op' => 'set_medias_like_results', 'medias' => $processed_medias);
  $results = $this->a4s_curl($data);
  
  echo "Results from handler...\n";
  echo print_r($results, TRUE);
}
*/

/*
    public function a4s_currentPageMedia_isLiked()
    {
       $node = $this->getSession()->getPage()->find('css', ".coreSpriteHeartFull");
       return $node === null ? FALSE : TRUE;
    }
*/
    
    

/**
 * Implements hook_mail().
 */
function a4s_instagram_mail($key, &$message, $params) {
  switch ($key) {
    
    case 'behat_problems_alert':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'] . '
        

<pre>' . print_r($params['data'], TRUE) . '</pre>';
      break;

  }
}

/**
 * 
 * @return string
 */
function  a4s_instagram_page() {
  
  $instagram_accounts_granted = variable_get('instagram_accounts_granted', NULL);
  if (!empty($instagram_accounts_granted) && !empty($instagram_accounts_granted['all4senses'])) {
    dpm($instagram_accounts_granted, '$instagram_accounts_granted');
    dpm('We have access. Let\'s Rock!');
   
    return 'Processed a real request to Instagram...';
  }
  
  dpm($_REQUEST, '$_REQUEST');
  $CLIENT_ID = '1eca294b0a6b478b9de165d9384edac1';
  $REDIRECT_URI = 'http://m-a-y.ru/insta';
  $CLIENT_SECRET = '59007de215f4492fb4cdca497e3b943a';
  
  if (!empty($_REQUEST['code'])) {
    $url = 'https://api.instagram.com/oauth/access_token';

    $data = array(
      'client_id' => $CLIENT_ID,
      'client_secret' => $CLIENT_SECRET,
      'grant_type' => 'authorization_code',
      'redirect_uri' => $REDIRECT_URI,
      'code'=> $_REQUEST['code'],
    ); 

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, count($data));
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $results = json_decode(curl_exec($ch), TRUE);
    curl_close($ch);
    dpm($results, '$results');
    if (!empty($results['access_token'])) {
      $instagram_accounts_granted[$results['user']['username']] = $results;
      variable_set('instagram_accounts_granted', $instagram_accounts_granted);
    }
    $out = 'We have got an access_token...';
    drupal_goto($REDIRECT_URI);
  }
  else {
     
    $out = '<a href="https://api.instagram.com/oauth/authorize/?client_id=' . $CLIENT_ID. '&redirect_uri=' . $REDIRECT_URI . '&response_type=code" >Authorize with Instagram</a>';
  }
  return $out;
}

/**
 * 
 * @param type $data_type
 * @param type $username
 * @param type $pages_count
 * @param type $end_cursor
 * @param type $items_per_query
 * @return type
 */
function a4s_insta_queryGraphql_multiple($data_type, $username, $pages_count = NULL, $end_cursor = NULL, $items_per_query = 10) {
  $data = array();
  $data_all = array();
  $max_id = NULL;
  
  // Just in case, limit pages amount to process.
  $max_pages_to_process = 30;
  $pages_processed = 0;
  
  do {
    $data = a4s_insta_queryGraphql_single($data_type, $username, $end_cursor, $items_per_query);
    if (empty($data['edges'])) {
      $data = array();
    }
    else {
      $data_all = array_merge($data_all, $data['edges']);
    }
    if ($pages_count !== NULL) {
      --$pages_count;
    }
    if (++$pages_processed >= $max_pages_to_process || empty($data['page_info']['has_next_page']) || empty($data['page_info']['end_cursor']) || ($pages_count !== NULL && $pages_count <= 0) ) {
      break;
    }
    $end_cursor = $data['page_info']['end_cursor'];
  }while(1);

  return $data_all;
}

/**
 * 
 * @param type $type
 * @param type $username
 * @param type $count
 * @param type $end_cursor
 * @return boolean
 */
function a4s_insta_queryGraphql_single($data_type, $username, $end_cursor = NULL, $items_per_query = 10) {
  
  //Example:
  //$variables = '{"id":"6218303298","first":10,"after":"AQCrgtZyW1dKfkQI8Xm7n4VmC_28FRCjFZ8ht_5WHNHsLJau_FwFjqdIB-yfqqJJk4sjA47Qd1SZHp-dS2yMej7-QuIdzzr0A6KwEOvs9CtxdA"}';
  //$url = "https://www.instagram.com/graphql/query/?query_hash=37479f2b8209594dde7facb0d904896a&variables=%7B%22id%22%3A%226218303298%22%2C%22first%22%3A10%2C%22after%22%3A%22AQC2c5Ud8R_m2Wagr8TnGYNRsQO-N0letvJFx7JH1NH3ySwey3NVgUF_uw7hdoyMgqouz1TBbZasNbIAoSlfDi_pxQm8bQvmkO7UFGhcQN_YvA%22%7D";
  //$end_cursor = 'AQCcbXzjdc_ZfOPp0T9xKt0lH-IYCbcbHjhF_NNy6R6DW19AnG4pGEKjYjPZXO5XezMQCPr7-fJWA63LWzY0Q3HfQ9jQ6zVjXYu1VO6dCwU_DA';
  
  switch ($data_type) {
    case 'followers':
      $query_hash = '37479f2b8209594dde7facb0d904896a'; // Folowers
      break;
    case 'following':
      $query_hash = '58712303d941c6855d4e888c5f0cd22f'; // Folowing
      break;
  }
  
  $behat_insta_cookies = variable_get('a4s_behat_insta_cookies', array());
  if (empty($behat_insta_cookies['https://instagram.com'][$username]['ds_user_id'])) {
    return FALSE;
  }
  $behat_insta_cookies_user = $behat_insta_cookies['https://instagram.com'][$username];
  $variables = '{"id":' . '"' . $behat_insta_cookies_user['ds_user_id'] . '","first":' . $items_per_query . ',"after":"' . $end_cursor . '"}';
  $variables = urlencode($variables);
  $url = "https://www.instagram.com/graphql/query/?query_hash=$query_hash&variables=$variables";
  //Example:
  //$cookies_str = 'Cookie: csrftoken=GJ3PPaL2FfIQYA9J2RfkI2tYfdWeD0VD; ds_user_id=6218303298; sessionid=6218303298%3AUSbb2R456PKkYn%3A12; ';
  $cookies_str = 'Cookie: csrftoken=' . $behat_insta_cookies_user['csrftoken'] . '; ds_user_id=' . $behat_insta_cookies_user['ds_user_id'] . '; sessionid=' . $behat_insta_cookies_user['sessionid'] . '; ';
  $results = a4s_insta_instagramCurlPage__withCookies($url, $cookies_str);
  
  switch ($data_type) {
    case 'followers':
      $data = !empty($results['data']['user']['edge_followed_by']) ? $results['data']['user']['edge_followed_by'] : NULL;
      break;
    case 'following':
      $data = !empty($results['data']['user']['edge_follow']) ? $results['data']['user']['edge_follow'] : NULL;
      break;
  }
  return $data;
}

/**
 * 
 * @param type $url
 * @param type $cookies_str
 *  Example:  'Cookie: csrftoken=GJ3PPaL2FfIQYA9J2RfkI2tYfdWeD0VD; ds_user_id=6218303298; sessionid=6218303298%3AUSbb2R456PKkYn%3A12; '
 */
function a4s_insta_instagramCurlPage__withCookies($url, $cookies_str){
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, 0);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array($cookies_str));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $results = json_decode(curl_exec($ch), TRUE);
  curl_close($ch);
  return $results;
}

/**
 * 
 * @param type $type
 * @param type $target
 * @param type $pages_count
 */
function a4s_insta_getDataMultiple($request_type, $data_type, $target, &$max_id, $pages_count = NULL) {
  $data = array();
  $data_all = array();
  
  // Just in case, limit pages amount to process.
  $max_pages_to_process = 30;
  $pages_processed = 0;
  
  do {
    switch ($request_type) {
      case 'fromRaw':
        $data = a4s_insta_getDataSingle__fromRaw($data_type, $target, $max_id);
        break;
      case 'fromA':
        $data = a4s_insta_getDataSingle__fromA($data_type, $target, $max_id);
        break;
    }
    
    $data_nodes = array();
    if (!empty($data['nodes'])) {
      $data_nodes = $data['nodes'];
    }
    elseif (!empty($data['edges'])) {
      $data_nodes = $data['edges'];
    }
    else {
      $data = array();
    }
    $data_all = array_merge($data_all, $data_nodes);
    if ($pages_count !== NULL) {
      --$pages_count;
    }
    $max_id = !empty($data['page_info']['end_cursor']) ? $data['page_info']['end_cursor'] : NULL;
    // Ignore $pages_count for a user/profile request
    if (++$pages_processed >= $max_pages_to_process || $data_type == 'user/profile' || empty($data['page_info']['has_next_page']) || empty($data['page_info']['end_cursor']) || ($pages_count !== NULL && $pages_count <= 0) ) {
      break;
    }
  }while(1);
  
  return $data_all;
}

/**
 * 
 * @param type $data_type
 * @param type $target
 * @param type $max_id
 * @return boolean|array
 */
function a4s_insta_getDataSingle__fromA($data_type, $target, $max_id = NULL) {
  switch ($data_type) {
    case 'user/profile':
    case 'user/media':
      $target_url = 'https://instagram.com/'. $target;
      break;
    case 'tag':
      $target_url = 'https://instagram.com/explore/tags/'. $target;
      break;
  }
  $target_url .= '?__a=1'; 
  if ($max_id) {
    $target_url .= '&max_id=' . $max_id; 
  }
  $response = file_get_contents($target_url);
  if ($response !== false) {
      $data = json_decode($response, true);
      if (!empty($data)) {
          switch ($data_type) {
            case 'user/profile':
              // Remove actual media data, as we return here only a general profile info
              $data['user']['media']['nodes'] = array();
              $out = !empty($data['user']) ? $data['user'] : NULL;
              /*
              $follows = $data['user']['follows']['count'];
              $followedBy = $data['user']['followed_by']['count'];
              dpm('$follows: ' . $follows . ', $followedBy: ' . $followedBy);
              */
              break;
            case 'user/media':
              $out = !empty($data['user']['media']) ? $data['user']['media'] : NULL;
              break;
            case 'tag':
              $out = !empty($data['graphql']['hashtag']['edge_hashtag_to_media']) ? $data['graphql']['hashtag']['edge_hashtag_to_media'] : NULL;
              break;
          }
          return $out;
      }
  }
  return FALSE;
}

/**
 * https://gist.github.com/cosmocatalano/4544576
 * and fix instead of file_get_contents()
 * https://stackoverflow.com/questions/21677579/server-configuration-by-allow-url-fopen-0-in
 *'code' in media is an url tag for image, like https://www.instagram.com/p/BeQ84NSlzQN/
 *
 * @param type $data_type
 * @param type $target
 * @param type $max_id
 * @return array
 */
function a4s_insta_getDataSingle__fromRaw($data_type, $target, $max_id = NULL) {
  switch ($data_type) {
    case 'user/profile':
    case 'user/media':
      $target_url = 'https://instagram.com/'. $target;
      break;
    case 'tag':
      $target_url = 'https://instagram.com/explore/tags/'. $target;
      break;
  }
  if ($max_id) {
    $target_url .= '?max_id=' . $max_id; 
  }
  $insta_source = a4s_insta_instagramCurlPage__fromRaw($target_url, $cookiesIn = '');
  if (empty($insta_source['content'])) {
    return NULL;
  }
  $shards = explode('window._sharedData = ', $insta_source['content']);
  $insta_json = explode(';</script>', $shards[1]); 
  $insta_array = json_decode($insta_json[0], TRUE);
  
  switch ($data_type) {
    case 'user/profile':
      // Remove actual media data, as we return here only a general profile info
      $insta_array['entry_data']['ProfilePage'][0]['user']['media']['nodes'] = array();
      $out = !empty($insta_array['entry_data']['ProfilePage'][0]['user']) ? $insta_array['entry_data']['ProfilePage'][0]['user'] : NULL;
      break;
    case 'user/media':
      $out = !empty($insta_array['entry_data']['ProfilePage'][0]['user']['media']) ? $insta_array['entry_data']['ProfilePage'][0]['user']['media'] : NULL;
      break;
    case 'tag':
      $out = !empty($insta_array['entry_data']['TagPage'][0]['graphql']['hashtag']['edge_hashtag_to_media']) ? $insta_array['entry_data']['TagPage'][0]['graphql']['hashtag']['edge_hashtag_to_media'] : NULL;
      break;
  }
  return $out;
}

/**
 * 
 * @param type $url
 * @param type $cookiesIn
 * @return type
 */
function a4s_insta_instagramCurlPage__fromRaw($url, $cookiesIn = ''){
            
    $options = array(
      CURLOPT_RETURNTRANSFER => true,     // return web page
      CURLOPT_HEADER         => true,     //return headers in addition to content
      CURLOPT_FOLLOWLOCATION => true,     // follow redirects
      CURLOPT_ENCODING       => "",       // handle all encodings
      CURLOPT_AUTOREFERER    => true,     // set referer on redirect
      CURLOPT_CONNECTTIMEOUT => 120,      // timeout on connect
      CURLOPT_TIMEOUT        => 120,      // timeout on response
      CURLOPT_MAXREDIRS      => 10,       // stop after 10 redirects
      CURLINFO_HEADER_OUT    => true,
      CURLOPT_SSL_VERIFYPEER => true,     // Validate SSL Cert
      CURLOPT_HTTP_VERSION   => CURL_HTTP_VERSION_1_1,
      CURLOPT_COOKIE         => $cookiesIn
    );

    $ch      = curl_init( $url );
    curl_setopt_array( $ch, $options );
    $rough_content = curl_exec( $ch );
    $err     = curl_errno( $ch );
    $errmsg  = curl_error( $ch );
    $header  = curl_getinfo( $ch );
    curl_close( $ch );
    
    $header_content = substr($rough_content, 0, $header['header_size']);
    $body_content = trim(str_replace($header_content, '', $rough_content));
    $pattern = "#Set-Cookie:\\s+(?<cookie>[^=]+=[^;]+)#m"; 
    preg_match_all($pattern, $header_content, $matches); 
    $cookiesOut = implode("; ", $matches['cookie']);

    $header['errno']   = $err;
    $header['errmsg']  = $errmsg;
    $header['headers']  = $header_content;
    $header['content'] = $body_content;
    $header['cookies'] = $cookiesOut;

    return $header;
}

/**
 * 
 */
function a4s_insta_get_images_to_click_byTags_allUsers_callback() {
  //return;
  //set_time_limit(0);

  $insta_users_tags = a4s_insta_get_user_tags();
  $behat_insta_cookies = variable_get('a4s_behat_insta_cookies', array());
  
  $insta_tags_pulled_last = variable_get('a4s_insta_tags_pulled_last', array());
  
  $behat_insta_users_keys = array_keys($behat_insta_cookies['https://instagram.com']);
  
  if (empty($insta_tags_pulled_last['username'])) {
    $insta_tags_pulled_last['username'] = current($behat_insta_users_keys);
    $insta_tags_pulled_last['tag'] = $insta_users_tags[$insta_tags_pulled_last['username']][0];
  }
  else {
    //$last_username_key = array_search($insta_cookies_tags_last['username'], $behat_insta_users_keys);
    $last_pulled_user_tags = $insta_users_tags[$insta_tags_pulled_last['username']];
    $last_pulled_tag_key = array_search($insta_tags_pulled_last['tag'], $last_pulled_user_tags);
    if ($last_pulled_tag_key + 1 >= count($last_pulled_user_tags)) {
       // It was the last tag for the previous user
       // So we have to switch to the next user and his first tag
      $last_pulled_user_key = array_search($insta_tags_pulled_last['username'], $behat_insta_users_keys);
      if ($last_pulled_user_key + 1 >= count($behat_insta_users_keys)) {
        $insta_tags_pulled_last['username'] = $behat_insta_users_keys[0];
      }
      else {
        $insta_tags_pulled_last['username'] = $behat_insta_users_keys[$last_pulled_user_key + 1];
      }
      $insta_tags_pulled_last['tag'] = $insta_users_tags[$insta_tags_pulled_last['username']][0];
    }
    else {
      $insta_tags_pulled_last['tag'] = $last_pulled_user_tags[$last_pulled_tag_key + 1];
    }
    
  }
  variable_set('a4s_insta_tags_pulled_last', $insta_tags_pulled_last);
  
  /*
  if (!empty($behat_insta_cookies['https://instagram.com'])) {
    foreach ($behat_insta_cookies['https://instagram.com'] as $username => $data) {
      $added_tags_amount[$username] = a4s_insta_get_images_to_click_byTags_singleUser($username, $insta_users_tags[$username]);
    }
  }
  */
  $added_tags_amount[$insta_tags_pulled_last['username']] = a4s_insta_get_images_to_click_byTags_singleUser($insta_tags_pulled_last['username'], array($insta_tags_pulled_last['tag']));
  drupal_json_output(array('New added tags amount' => $added_tags_amount));
}

/**
 * 
 * @param type $username
 * @return type
 */
function a4s_instagram_get_local_account_id_by_username($username) {
  $map_username_to_account_id_default = array('all4senses' => 1, 'olyayuskasova' => 2);
  $map_username_to_account_id = variable_get('a4s_map_username_to_account_id', $map_username_to_account_id_default);
  return $map_username_to_account_id[$username];
}

/**
 * 
 * @param type $username
 *  Example: 'olyayuskasova'
 * @param type $tags
 *  Example: array('design', 'art', 'interior');
 * @param type $min_medias_for_tag
 */
function a4s_insta_get_images_to_click_byTags_singleUser($username = 'olyayuskasova', $tags, $min_medias_for_tag = 20) {

  $account_id = a4s_instagram_get_local_account_id_by_username($username);
  $added_tags_amount = array();
  
  foreach ($tags as $tag) {
    $not_liked_by_tag = db_select('a4s_insta_clicks_by_tag', 'l')
        ->fields('l', array('shortcode'))
        ->condition('l.tag', $tag)
        ->isNull('l.liked')
        ->execute()
        ->fetchCol();
    $count_existing_in_db = $count_existing_in_db_before = count($not_liked_by_tag);
    $max_id = NULL;
    while ($count_existing_in_db < $min_medias_for_tag) {
      //$results = a4s_insta_getDataMultiple('fromA', 'tag', $tag, $max_id, 1);
      $results = a4s_insta_getDataMultiple('fromA', 'tag', $tag, $max_id, 1);
      if (!$results) {
        break;
      }
      $media_to_db = array();
      foreach ($results as $result) {
        $result = $result['node'];
        if (in_array($result['shortcode'], $not_liked_by_tag)) {
          continue;
        }
        $media_to_db[$result['shortcode']] = array(
          'account_id' => $account_id,
          'shortcode' => $result['shortcode'],
          'caption' => !empty($result['edge_media_to_caption']['edges'][0]['node']['text']) ? drupal_substr(utf8_encode($result['edge_media_to_caption']['edges'][0]['node']['text']), 0, 25) : NULL,
          'media_owner_id' => $result['owner']['id'],
          'tag' => $tag,
          'thumbnail' => !empty($result['thumbnail_resources'][0]['src']) ? $result['thumbnail_resources'][0]['src'] : NULL,
          'is_video' => empty($result['is_video']) ? NULL : 1,
          'timestamp_added' => time(),
        );
        // Add to DB...
        $lid = db_insert('a4s_insta_clicks_by_tag')->fields(
                $media_to_db[$result['shortcode']]
               )->execute();
      }
      $not_liked_by_tag = array_merge($not_liked_by_tag, array_keys($media_to_db));
      $count_existing_in_db = count($not_liked_by_tag);
    }
    watchdog('a4s get medias', 'Added ' . ($count_existing_in_db - $count_existing_in_db_before) . ' medias of a tag "' . $tag . '" for ' . $username);
    $added_tags_amount[$tag] = $count_existing_in_db - $count_existing_in_db_before;
  }
  return $added_tags_amount;
}

/**
 * 
 * @param type $op
 *  'disable' OR 'enable'
 * 
 * @see https://stackoverflow.com/questions/38600772/is-there-a-way-to-configure-jenkins-to-stop-building-further-if-some-of-the-tes
 */
function a4s_instagram_jenkins_insta_switch_status($op = 'disable') {
  $url = "http://192.168.1.9:8181/job/Insta_v1/$op";
  $data = array($op => TRUE);
  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, count($data));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

  $results = json_decode(curl_exec($ch), TRUE);
  curl_close($ch);
}
      
/**
 * 
 * @param type $username
 */
function a4s_instagram_update_followers_single_username($username = 'all4senses', $dpm = FALSE, $dpm_all_new = FALSE, $dpm_all_existing = FALSE) {
  $account_id = a4s_instagram_get_local_account_id_by_username($username);
  $new_followers = a4s_insta_queryGraphql_multiple('followers', $username, $pages_count = NULL, $end_cursor = NULL, $items_per_query = 10);
  
  if ($dpm_all_new) {
    dpm($new_followers, '$new_followers');
  }
  
  // Get all existing followers (active and not active anymore)
  $existing_followers = db_select('a4s_insta_followers', 'f')
    ->fields('f', array('fid', 'username', 'full_name', 'remote_id', 'followed_back', 'is_following_now', 'timestamp_unfollowed_first_time'))
    ->condition('f.account_id', $account_id)
    ->execute()
    ->fetchAllAssoc('remote_id');
  
  if ($dpm_all_existing) {
    dpm($existing_followers, '$existing_followers');
  }
  
  if (!$existing_followers) {
    $existing_followers = array();
  }
  
  $current_time = time();
  
  $existing_followers_unfollowed = array();
  $new_followers_remote_ids = array();
  $changed_followers = array();
  
  // Check for new and repeated followers
  foreach ($new_followers as $new_follower) {
    $update_existing = FALSE;
    $new_follower = $new_follower['node'];
    $new_follower['followed_by_viewer'] = $new_follower['followed_by_viewer'] ? 1 : 0;
    $new_followers_remote_ids[] = $new_follower['id'];
    $existing_follower = !empty($existing_followers[$new_follower['id']]) ? $existing_followers[$new_follower['id']] : NULL;
    
    if (!$existing_follower) {
      // We have a new follower
      // Add it to DB...
      $fid = db_insert('a4s_insta_followers')->fields(
            array(
              'account_id' => $account_id,
              'remote_id' => $new_follower['id'],
              'username' => $new_follower['username'],
              'full_name' => utf8_encode($new_follower['full_name']),
              'thumbnail' => $new_follower['profile_pic_url'],
              'followed_back' => $new_follower['followed_by_viewer'],
              'timestamp_added' => $current_time,
              'is_following_now' => 1,
            )
         )->execute();
      
      $changed_followers['added'][] = $new_follower;
      if ($dpm) {
        dpm($new_follower, 'NEW, not yet existing $new_follower');
      }
    }
    else {
      if (!$existing_follower->is_following_now) {
        // This follower has become a follower repeatedly 
        $rid = db_insert('a4s_insta_followers_repeated_followings')->fields(
            array(
              'fid' => $existing_follower->fid,
              'event_type' => 1, // Follower again
              'timestamp' => $current_time,
            )
         )->execute();
        $update_existing = TRUE;
        if ($dpm) {
          dpm($new_follower, '$new_follower...This follower has become a follower repeatedly');
        }
      }
      
      if ($update_existing || $existing_follower->followed_back != $new_follower['followed_by_viewer']) {
        db_update('a4s_insta_followers')
            ->fields(
                array(
                  'followed_back' => $new_follower['followed_by_viewer'],
                  'timestamp_updated' => $current_time,
                  'is_following_now' => 1,
                )
              )
            ->condition('account_id', $account_id)
            ->condition('remote_id', $new_follower['id'])
            ->execute();
        
        
        $changed_followers['updated'][] = $new_follower;
        if ($existing_follower->followed_back != $new_follower['followed_by_viewer']) {
          if ($dpm) {
            dpm($new_follower, '$new_follower... Changed followed_back/followed_by_viewer status');
          }
        }
      }
    } // End of else of if (!$existing_follower) {
  } // End of foreach ($results as $new_follower) {
  
  // Check for unfollowed followers
  foreach ($existing_followers as $existing_follower) {
    
    if (!in_array($existing_follower->remote_id, $new_followers_remote_ids)) {
        
        if (!$existing_follower->is_following_now) {
          if ($dpm) {
            $existing_followers_unfollowed[] = (array) $existing_follower;
          }
        }
        else {
            if ($dpm) {
              dpm($existing_follower, '$existing_follower, This follower has been just unfollowed, we have to update our data in DB');
            }
            // This follower has been unfollowed
            if (!$existing_follower->timestamp_unfollowed_first_time) {
              if ($dpm) {
                dpm('...unfollowing for the first time');
              }
              // It's unfollowing for the first time
              // We update only the main follower table and a fields timestamp_unfollowed_first_time and is_following_now
              db_update('a4s_insta_followers, set timestamp_unfollowed_first_time in DB')
                  ->fields(
                      array(
                        'is_following_now' => 0,
                        'timestamp_updated' => $current_time,
                        'timestamp_unfollowed_first_time' => $current_time,
                      )
                    )
                  ->condition('account_id', $account_id)
                  ->condition('remote_id', $existing_follower->remote_id)
                  ->execute();

              $changed_followers['unfollowed_first_time'][] = (array) $existing_follower;
            }
            else {
              if ($dpm) {
                dpm('...repeatedly unfollowing, add unfollow to the a4s_insta_followers_repeated_followings and update');
              }
              // Or else it's repeatedly unfollowing
              $rid = db_insert('a4s_insta_followers_repeated_followings')->fields(
                  array(
                    'fid' => $existing_follower->fid,
                    'event_type' => 0, // UnFollower again
                    'timestamp' => $current_time,
                  )
               )->execute();

              db_update('a4s_insta_followers')
                  ->fields(
                      array(
                        'is_following_now' => 0,
                        'timestamp_updated' => $current_time,
                      )
                    )
                  ->condition('account_id', $account_id)
                  ->condition('remote_id', $existing_follower->remote_id)
                  ->execute();

              $changed_followers['unfollowed_repeatedly'][] = (array) $existing_follower;
            }
        }
    }
  }
  //if ($dpm) {
  //  dpm($changed_followers, '$changed_followers, final results');
  //}
  
  if (!empty($changed_followers)) {
    $fields_to_unset = array('id', 'full_name', 'profile_pic_url', 'is_verified', 'requested_by_viewer');
    foreach ($changed_followers as $data_set_key => $data_set) {
      foreach ($data_set as $data_key => $data) {
        foreach ($fields_to_unset as $field_to_unset) {
          unset($changed_followers[$data_set_key][$data_key][$field_to_unset]);
        }
      }
    }
  }
  if ($dpm) {
    dpm($changed_followers, '$changed_followers, final results, after cleaning');
    if (!empty($existing_followers_unfollowed)) {
      dpm($existing_followers_unfollowed, '$existing_followers_unfollowed - not in new followers, BUT in DB, already marked before as not followers anymore');
    }
  }
  watchdog('a4s followers', "$username: => <pre>" . print_r($changed_followers, TRUE) . '</pre>');
    
  return $changed_followers;
}

/**
 * 
 */
function a4s_instagram_update_followers_all_users_callback() {
  // Process different user every time
  $users_to_process = array('olyayuskasova', 'all4senses');

  $last_followers_update_user = variable_get('a4s_insta_last_followers_update_user', array());

  if (count($users_to_process) > 1) {
    if (empty($last_followers_update_user)) {
      $current_user = $users_to_process[0];
    }
    else {
      foreach ($users_to_process as $key => $user) {
        if ($user == $last_followers_update_user) {
          if ($key + 1 >= count($users_to_process)) {
            $current_user = $users_to_process[0];
          }
          else {
            $current_user = $users_to_process[$key + 1];
          }
        }
      }
    }
  }
  else {
    $current_user = $users_to_process[0];
  }
  variable_set('a4s_insta_last_followers_update_user', $current_user);
  
  $results = a4s_instagram_update_followers_single_username($current_user);
  if (!empty($results)) {
    foreach ($results as $key => &$data) {
      $data = count($data);
    }
  }
  drupal_json_output(array("Updated followers for $current_user" => $results));
}

/**
 * 
 * @param type $follower_username
 * @param type $account_username
 */
function a4s_instagram_get_follower_info($follower_username, $account_username = 'all4senses') {
  $account_id = a4s_instagram_get_local_account_id_by_username($account_username);
  $follower_data = array();
  $follower_data['main'] = db_select('a4s_insta_followers', 'f')
    ->fields('f', array())
    ->condition('f.account_id', $account_id)
    ->condition('f.username', $follower_username)
    ->execute()
    ->fetchObject();
  
  //dpm($follower_data_main, '$follower_data_main');
  
  $follower_data['extra'] = db_select('a4s_insta_followers_repeated_followings', 'f')
    ->fields('f', array())
    ->condition('f.fid', $follower_data['main']->fid)
    ->execute()
    ->fetchAllAssoc('timestamp');
  
  dpm($follower_data, '$follower_data');
}